version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventhive-db-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-eventhive}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - eventhive-network

  # Backend API Server (Development)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: eventhive-backend-dev
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-eventhive}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - eventhive-network
    volumes:
      - ./server:/app
      - /app/node_modules
    command: npm run dev

  # Frontend React App (Development)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: eventhive-frontend-dev
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - eventhive-network
    volumes:
      - ./client:/app
      - /app/node_modules
    command: npm start

volumes:
  postgres_data_dev:

networks:
  eventhive-network:
    driver: bridge
